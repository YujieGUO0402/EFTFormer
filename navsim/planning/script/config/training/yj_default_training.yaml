hydra:
  run:
    dir: ${output_dir}
  output_subdir: ${output_dir}/code/hydra           # Store hydra's config breakdown here for debugging
  searchpath:                                       # Only <exp_dir> in these paths are discoverable
    - pkg://navsim.planning.script.config.common
    - pkg://navsim.planning.script.config.training


defaults:
  - default_common
  - default_evaluation
  # - default_train_val_test_log_split
  # - agent: yj_navsim_agent
  - default_train_val_test_log_split
  - agent: yj_agent
  - override train_test_split: mini

split: mini
# cache_path: ${oc.env:NAVSIM_EXP_ROOT}/training_cache
#cache_path: /media/yujie/data/E2EAD/endtoenddriving_test/exp/cache_data/training_cache_mini_f3_f8_yolo_cam_para_lidar_occ
cache_path: /media/yujie/data/E2EAD/endtoenddriving_test/exp/cache_data/training_cache_mini_test
use_cache_without_dataset: false # load the training samples from the cache. scene-filter will be ignored
force_cache_computation: false
experiment_name: yj_train

dataloader:
  params:
    batch_size: 2  # number of samples per batch
    num_workers: 0  # number of workers for data loading
    pin_memory: true  # pin memory for faster GPU transfer
    prefetch_factor: 2  # number of samples loaded in advance by each worker

trainer:
  params:
    max_epochs: 1000  # maximum number of training epochs
    check_val_every_n_epoch: 1  # run validation set every n training epochs
    val_check_interval: 1.0  # [%] run validation set every X% of training set

    limit_train_batches: 1.0  # how much of training dataset to check (float = fraction, int = num_batches)
    limit_val_batches: 1.0  # how much of validation dataset to check (float = fraction, int = num_batches)

    accelerator: gpu  # distribution method
    strategy: ddp
    precision: 16-mixed  # floating point precision
    num_nodes: 1  # Number of nodes used for training

    num_sanity_val_steps: 0  # number of validation steps to run before training begins
    fast_dev_run: false  # runs 1 batch of train/val/test for sanity

    accumulate_grad_batches: 1  # accumulates gradients every n batches
    # track_grad_norm: -1  # logs the p-norm for inspection
    gradient_clip_val: 0.0  # value to clip gradients
    gradient_clip_algorithm: norm  # [value, norm] method to clip gradients